https://kirr.co/8mjnna

Install Python & Django on Windows: https://www.codingforentrepreneurs.com/blog/install-python-django-on-windows/
PowerShell: 
.\Scripts\activate


Create Templates --> add Templates dir to base.py --> define views for templates in views.py --> urls slugs in urls.py for the views

re-activate virtual env --> source ../bin/activate   or  .\Scripts\activate {for multiple terminal windows}
to deactivate --> deactivate


class-based views API
https://docs.djangoproject.com/en/2.1/ref/class-based-views/

eg: In views.py
 class ContactView(View):
	def get(self, request, *args, **kwargs):    /post /put
		context = {}
		return render(request, "contact.html", context) 

	In urls.py
	url(r'^contact/$', ContactView.as_view()),
also see Template views


Remembering Things
	Create your Restaurant Model in models.py inside restaurants app
	and add 'restaurants' app in base.py -> INSTALLED_APPS
	then register your model in restaurants --> admin.py
		-> from .models import Restaurant
		-> admin.site.regiter(Restaurant)

Displaying Saved Data
eg: using Functional View in views.py
	def restaurant_listview(request):
	template_name = 'restaurants/restaurant_list.html'
	queryset = RestaurantLocation.objects.all()
	context = {
		"object_list" : queryset
	}
	return render(request, template_name, context)

	Urls.py -> url(r'^restaurants/$', restaurant_listview)

	In restaurants app make files - templates\restaurants\restaurant_list.html
	listing data: <li> {{ obj }}<br/> {{ obj.location }}, {{ obj.description }}, {{ obj.added_date }}, {{ obj.updated_date }}</li>


Using Python Shell for QuerySet API examples
https://docs.djangoproject.com/en/2.1/ref/models/querysets/
-> python or -> python manage.py shell

	Geting Data from queryset
	--> from restaurants.models import RestaurantLocation
	--> RestaurantLocation.objects.all()
	--> for obj in RestaurantLocation.objects.all():
	...     print(obj.name)

	Filtering in queryset
	--> qs = RestaurantLocation.objects.all()
	>>> qs.filter(category__iexact="Newari cuisine")

	QuerySet exists? 
	->qs.existe()

	QuerySet count
	-> qs.count()

	Updating objects in a queryset
	--> qs.update(category='Food')
	2

	Adding a record
	-> obj = RestaurantLocation()
	-> obj.name="Tribeni Khaja Ghar"
	-> obj.location = "Karunamarga-5, Banepa"
	-> obj.description = "Khaja Ghar, Hotel and Bhatti"
	-> obj.category = 'Newari Khaja Ghar'
	-> obj.save()

******BUT WE USE
			obj = RestaurantLocation.objects.create(name='xx',location='xx..', ...)

	Combined Filter
			-> qs = RestaurantLocation.objects.all()
			-> qs2 = RestaurantLocation.objects.filter(category__iexact='Newari Cuisine')
			-> qs.existe()
			-> qs2.count()
	->qs = RestaurantLocation.objects.filter(category__iexact='Newari Cuisine').exclude(name__icontains='Cafe')


Generic List View
https://docs.djangoproject.com/en/2.1/ref/class-based-views/generic-display/#listview
add/import ListView in views.py
	make class based views for restaurants, newari, bakery
	add them in urls.py

	url slugs:
		url(r'^restaurants/(?P<slug>\w+)/$', SearchRestaurantListView.as_view()),
	class based implementation
		class SearchRestaurantListView(ListView):
		template_name = 'restaurants/restaurant_list.html'

		def get_queryset(self):
			print(self.kwargs)
			slug = self.kwargs.get("slug")
			if slug:
				queryset = RestaurantLocation.objects.filter(category__icontains=slug)
			else:
				queryset = RestaurantLocation.objects.all()
			return queryset 

	Q lookups - In views.py
		from django.db.models import Q
		queryset = RestaurantLocation.objects.filter(
					Q(category__iexact=slug) |
					Q(category__icontains=slug) 
				)

Change filename of restaurant_list.html to restaurantlocation_list.html
	remove template from the view class-- gives error --use default template name ie restaurantlocation_list.html

Restaurant Profile Detail - Make view page for each results
	Import DetailView in restaurants/views.py
	Import RestaurantDetailView in urls.py
		add url pattern of search by id instead of search by slug
		    url(r'^restaurants/(?P<pk>\w+)/$', RestaurantDetailView.as_view()),
		    These are regular expressions --> https://www.codingforentrepreneurs.com/blog/common-regular-expressions-for-django-urls/

		    In views.py, create this class
		    class RestaurantDetailView(DetailView):
			queryset = RestaurantLocation.objects.all()
			
			def get_context_data(self, *args, **kwargs):
				print(self.kwargs)
				context = super(RestaurantDetailView, self).get_context_data(*args, **kwargs)
				print(context)
				return context

			Make a template --> restaurantlocation_detail.html

	using any other parameter as a slug -> eg: rest_id
		new class def -> def get_object(-,-,-):
		from django.shortcuts import render, get_object_or_404

		def get_object(self, *args, **kwargs):
		rest_id = self.kwargs.get('rest_id')
		obj = get_object_or_404(RestaurantLocation, id=rest_id)  #or pk = rest_id
		return obj